#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct
# 
# Purpose: Test vfsa program in multiple interfaces model.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programer: Rodolfo A C Neves (Dirack) 26/03/2020
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

from rsf.proj import *

xmax = 6.0
zmax = 2.0

layers = ((0.30,0.50,0.20,0.30),
          (0.55,0.75,0.45,0.55),
          (0.65,0.85,0.55,0.65),
          (1.30,1.30,1.60,1.20))

velocities = (1.508,
              1.581,
              1.690,
              1.826,
              2.000)

def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0101 # non-round for reproducibility

Flow('refs','layers',
     'spline o1=0 d1=%g n1=%d' % (d,int(1.5+xmax/d)))
Flow('dips','refs','deriv scale=y')

Flow('mod1','refs',
     '''
     unif2 d1=%g n1=%d v00=%s
     ''' % (d,int(1.5+zmax/d),vstr))

Result('mod1',
       '''
       grey color=j title="Model 1"
       screenratio=%g screenht=4
       mean=y titlesz=8 labelsz=6
       label1="Depth (km)"
       label2="Distance (km)"
       ''' % (zmax/xmax))

# Kirchoff modeling for multi layer model
Flow('dataCube','refs dips',
	'''
	kirmod_newton nt=1001 dt=0.004 freq=10
	ns=401 ds=0.025 nh=161 dh=0.025 h0=0 s0=0 verb=y cmp=y
	vstatus=0 velocity=%s debug=n fwdxini=y
	xref=0 zref=0 dip=${SOURCES[1]} |
	put d2=0.0125 label3="CMP" unit3="Km" label2="Offset" unit2="Km" label1=Time unit1=s
	''' % (vstr))

Flow('templateSurface','spike n1=161 d1=0.0125 o1=0 n2=401 d2=0.025 o2=0 unit1=Offset unit2=CMP')

# Very Fast Simulated Aneelling Global Optimization (VFSA)
m0=3
v0=1.508
t0=[0.5,0.8,0.9]
for i in range(3):

	crsParamters = 'crsParameters-%d' % i
	crsAppSurface = 'crsAppSurface-%d' % i

	Flow(crsParameters,'dataCube',
		'''
		vfsacrsnh m0=%g v0=%g t0=%g verb=y repeat=2
		''' % (m0,v0,t0[i]))

	# Aproximation surface for each reflector
	Flow(crsAppSurface,['templateSurface',crsParameters],
		'''
		nhcrssurf param=${SOURCES[1]} m0=%g v0=%g t0=%g verb=y
		''' % (m0,v0,t0[i]))
	Plot(crsAppSurface,
		'''
		grey color=j bias=2 scalebar=y barlabel=Time barunit=s barreverse=y 
		title="Non-hyperbolic CRS m0=5Km" label1=Half-Offset unit1=km label2=Midpoint unit2=km
		''')

End()
