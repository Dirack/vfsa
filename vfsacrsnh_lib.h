/* This file is automatically generated. DO NOT EDIT! */

#ifndef _vfsacrsnh_lib_h
#define _vfsacrsnh_lib_h


#define hMAX 50 // Max of samples to stack in half-offset
#define mMAX 50 // Max of samples to stack in CMP
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <rsf.h>


#define signal(s) ((s<0)?(-1.):(1.))
/*< Signal function >*/


float getRandomNumberBetween0and1();
/*< Function to get a random number between 0 and 1 >*/


float getVfsaIterationTemperature(	int iteration /* Number of the current iteration */,
					float dampingFactor /* C0, the VFSA damping factor */,
					float initialTemperature /* T0, the VFSA Initial temperature */);
/*< Temperature function for VFSA algorithm >*/


void disturbParameters(  float temperature /* Temperature of the current iteration */,
			 float* disturbedParameter /* disturbed parameters vector */,
			 float* parameter /* parameters vector */,
			 float rn_max,
			 float rn_min,
			 float rnip_max,
			 float rnip_min,
			 float beta_max,
			 float beta_min);
/*< Disturb parameters from the previous VFSA iteration

Note: It receives a parameter vector and distubs it accordingly to 
VFSA algorithm disturb parameters step.
 >*/


void nonHyperbolicCRSapp(	float t[2*mMAX+1][hMAX] /* non-hyperbolic CRS traveltime surface */,
				float m0 /* Central CMP of the approximation */,
				float dm, /* CMP sampling */
				float om /* CMP axis origin */,
				float dh /* half-offset sampling */,
				float oh /* half-offset axis origin */,
				float t0 /* Normal ray traveltime */,
				float v0 /* Near surface velocity */,
				float RN /* RN, CRS parameter */,
				float RNIP /* RNIP, CRS parameter */,
				float BETA /* BETA, CRS parameter */,
				bool half /* Half-Offset coordinates */);
/*< Returns the Non hyperbolic CRS approximation surface (FOMEL; KAZINNIK, 2013) >*/


float semblance(float m0 /* Central CMP of the approximation */,
		float dm /* CMP sampling */,
		float om /* CMP axis origin */,
		float oh /* half-offset axis origin */,
		float dh /* half-offset axis sampling */,
		float dt /* time sampling */,
		int nt /* number of time samples */,
		float t0 /* Normal ray traveltime */,
		float v0 /* Near surface velocity */,
		float RN /* RN, CRS parameter */,
		float RNIP /* RNIP, CRS parameter */,
		float BETA /* BETA, CRS parameter */,
		float*** t /* reflection data cube A(m,h,t) */,
		bool half /* Half-offset coordinates */);
/*< Calculate semblance between the Non Hyperbolic CRS approximation surface and reflection data >*/


bool repeatOptionEqual1ForGetConvergenceGraphTrue(bool get_convergence_graph, int repeat);
/*< Repeat option should be equal one when get_convergence_graph flag is on to avoid multiple thread >*/


void prepareConvergenceGraphFile(sf_file outgraph, bool get_convergence_graph, int repeat, int itmax);
/*< Check parameters (repeat should be equal to 1 when generating a convergence graph)  and Prepare the convergence graph file >*/

#endif
